`include "constants.vams"
`include "disciplines.vams"

module {{ name }}(u, y, x, mode);

{% for k, v in parameters.items() -%}
parameter real {{ k }} = {{ v }};
{% endfor %}

input  [0:{{ nb_inputs -1 }}] u;
output [0:{{ nb_outputs -1 }}] y;
output [0:{{ nb_states -1 }}] x;
input  [0:{{ nb_modes -1 }}] mode;

electrical [0:{{ nb_inputs -1 }}] u;
electrical [0:{{ nb_outputs -1 }}] y;
electrical [0:{{ nb_states -1 }}] x;
electrical [0:{{ nb_modes -1 }}] mode;

real {{ modes[0]|get_mode_indices }};

analog begin
	@( cross(V(mode[0]) - 0.5, 0)) begin
		if ( V(mode[0]) < 0.5 ) begin
				a11 = -1 / cfly / ron / 2;
				a12 = -1 / cfly / ron / 2;
				a21 = -1 / cload / ron / 2;
				a22 = -1 / cload / ron / 2;

				b11 = 0;
				b12 = 1 / cfly / ron / 2;
				b21 = -1 / cload;
				b22 = 1 / cload / ron / 2;

				c11 = 0;
				c12 = 1;

				c11 = 0;
				d12 = 0;
		end else if ( V(mode[0]) > 0.5 ) begin
				a11 = -1 / cfly / ron / 2;
				a12 = 1 / cfly / ron / 2;
				a21 = 1 / cload / ron / 2;
				a22 = -1 / cload / ron / 2;

				b11 = 0;
				b12 = 0;
				b21 = -1 / cload;
				b22 = 0;

				c11 = 0;
				c12 = 1;

				c11 = 0;
				d12 = 0;
		end
	end

	// state-space equations
	V(x[0]) : ddt(V(x[0])) == a11*V(x[0]) + a12*V(x[1]) + b11*V(iout) + b12 * V(vin) ;
	V(x[1]) : ddt(V(x[1])) == a21*V(x[0]) + a22*V(x[1]) + b21*V(iout) + b22 * V(vin) ;


	// output equations
	V(vout) <+ c11*V(x[0]) + c12*V(x[1]) + d11*V(iout) + d12 * V(vin) ;

end
endmodule
